import { JwtService } from '@nestjs/jwt';
import { Repository } from 'typeorm';
import { LoggerService } from '../logger/logger.service';
import { UserService } from '../user/user.service';
import { CreateAgencyDto } from './dto/create-agency.dto';
import { UpdateAgencyDto } from './dto/update-agency.dto';
import { Agency } from './entities/agency.entity';
import { Email } from './entities/email.entity';
import { Fax } from './entities/fax.entity';
import { Telephone } from './entities/telephone..entity';
export declare class AgencyService {
    private agenceRepository;
    private emailRepository;
    private telphoneRepository;
    private faxRepository;
    private readonly userService;
    private readonly loggerService;
    private jwt;
    constructor(agenceRepository: Repository<Agency>, emailRepository: Repository<Email>, telphoneRepository: Repository<Telephone>, faxRepository: Repository<Fax>, userService: UserService, loggerService: LoggerService, jwt: JwtService);
    create(createAgencyDto: CreateAgencyDto, token?: string): Promise<number>;
    findAll(token: string): Promise<Agency[]>;
    findAllByAdmin(id: number): Promise<Agency[]>;
    findOne(id: number): Promise<Agency>;
    update(id: number, updateAgencyDto: UpdateAgencyDto, token: string): Promise<Agency>;
    remove(id: number, token: string): Promise<import("typeorm").DeleteResult>;
    findById(id: number): Promise<Agency>;
    loadMockData(): void;
    getAlllogs(): Promise<import("../logger/entities/logger.entity").Logger[]>;
    getTelsByAgence(id: number): Promise<Telephone[]>;
    getFaxsByAgence(id: number): Promise<Fax[]>;
    getEmailsByAgence(id: number): Promise<Email[]>;
}
